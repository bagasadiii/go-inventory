// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	model "inventory-app/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// AccServiceMethod is an autogenerated mock type for the AccServiceMethod type
type AccServiceMethod struct {
	mock.Mock
}

// DeleteAccountService provides a mock function with given fields: username, password
func (_m *AccServiceMethod) DeleteAccountService(username string, password string) error {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByUsername provides a mock function with given fields: username
func (_m *AccServiceMethod) GetAccountByUsername(username string) (*model.Account, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByUsername")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Account, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginService provides a mock function with given fields: username, password
func (_m *AccServiceMethod) LoginService(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginService")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterService provides a mock function with given fields: acc
func (_m *AccServiceMethod) RegisterService(acc *model.Account) error {
	ret := _m.Called(acc)

	if len(ret) == 0 {
		panic("no return value specified for RegisterService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account) error); ok {
		r0 = rf(acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountService provides a mock function with given fields: acc
func (_m *AccServiceMethod) UpdateAccountService(acc *model.Account) (*model.Account, error) {
	ret := _m.Called(acc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountService")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Account) (*model.Account, error)); ok {
		return rf(acc)
	}
	if rf, ok := ret.Get(0).(func(*model.Account) *model.Account); ok {
		r0 = rf(acc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Account) error); ok {
		r1 = rf(acc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccServiceMethod creates a new instance of AccServiceMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccServiceMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccServiceMethod {
	mock := &AccServiceMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
